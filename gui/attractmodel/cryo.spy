Type Data_CryoEM_SITUS:Data{}

Type CryoPartnerInterface {
  ## form pdbfile.type = "file"
  ## form pdbfile.name = "Structure file"
  *ResourceData_PDB pdbfile

  ## form code.length = 4
  ## form code.name = "Or define?"
  *PDBCode code
  
  ## form code.type = None

  ## form chain.name = "Which chain of the structure must be used?"
  ## form chain.options = "All", "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"
  String chain = "All"
  validate {
    assert not (pdbfile is None and code is None)
    assert pdbfile is not None or code is not None
  }
  
  ## form chain.type = None
}

Type AxSymmetry {
  Integer molecule
  Integer fold
  DVector axis
  validate {
    assert molecule > 0
    assert fold > 0
  }
  form {
    molecule.add_header("You can define generative symmetry")
    molecule.add_header("The origin of the axis must be the global origin")
    molecule.add_header("Which molecule? (1,2,3, ...)")
    fold.name = "Cx symmetry fold (2-fold, 3-fold, ...)"
    axis.name = "Generative symmetry axis"
  }
}

Type CryoInterface {

  CryoPartnerInterfaceArray partners = []
  ## form partners.length = 6
  ## form partners.form = "soft"
  ## form partners.count_from_one = True
  AxSymmetryArray axsymmetry = []
  ## form axsymmetry.length = 3
  ## form axsymmetry.form = "soft"
  ## form axsymmetry.count_from_one = True
  ## form axsymmetry.name = "Generative symmetry operators"
  validate {
    if len(axsymmetry): assert tabu1 == tabu2 == 0 ##TODO: rearrange-monomers
    for a in axsymmetry: assert a.molecule <= len(partners)
  }

  *ResourceData_CryoEM_SITUS mapfile
  ## form mapfile.type = "file"
  *String mapfilename
  validate {
    assert not (mapfile is None and mapfilename is None)
    assert mapfile is not None or mapfilename is not None
  }
  *Float mapmass
  ## form mapmass.add_header("If the total mass of your density map is different (larger) than the sum of the molecules that are to be fitted, indicate this below")
  ## form mapmask_threshold.add_header("During sampling, the density map will be converted to a mask")
  ## form mapmask_threshold.add_header("Voxels with sufficient density become positive voxels")
  ## form mapmask_threshold.add_header("Atoms inside positive voxels give only a penalty if there are too many")
  ## form mapmask_threshold.add_header("Atoms inside negative voxels always give a penalty")
  ## form mapmask_threshold.name = "Mapmask density threshold"
  Float mapmask_threshold = 10.0
  ## form mapmask1_voxelsize.add_header("Mapmask 1 is used in stage 1")
  ## form mapmask1_voxelsize.name = "Mapmask 1 voxel size (angstroms)"
  Float mapmask1_voxelsize = 10  
  ## form mapmask1_dimension.add_header("The mask is a box from -D to D angstroms, for D in X/Y/Z")
  ## form mapmask1_dimension.add_header("Voxels outside the box are always negative")
  ## form mapmask1_dimension.name = "Mapmask 1 box dimension D"
  Float mapmask1_dimension = 500
  ## form mapmask2_voxelsize.add_header("Mapmask 2 is used in stage 2-5")
  ## form mapmask2_voxelsize.name = "Mapmask 2 voxel size (angstroms)"
  Float mapmask2_voxelsize = 5
  ## form mapmask2_dimension.add_header("The mask is a box from -D to D angstroms, for D in X/Y/Z")
  ## form mapmask2_dimension.add_header("Voxels outside the box are always negative")
  ## form mapmask2_dimension.name = "Mapmask 2 box dimension D"
  Float mapmask2_dimension = 250
  ## form maskweight.name = "Energy weights of the mask during each of the 5 stages"
  FloatList maskweight[5] = (8000, 300, 600, 1000, 1000)
  Float energy_threshold = 10000
  ## form energy_threshold.add_header("Mask energy threshold for elimination during stage 3 and 4")
  ## form energy_threshold.name = "Energy threshold"
  form {
    g = "Cryo-EM data"
    mapfile.group = g
    mapfilename.group = g
    mapmass.group = g
    energy_threshold.group = g
    mapmask_threshold.group = g
    mapmask1_dimension.group = g
    mapmask1_voxelsize.group = g
    mapmask2_dimension.group = g
    mapmask2_voxelsize.group = g
    maskweight.group = g
  }

  *ResourceData_CNS_Restraints harmonic_restraints_file
  ##form harmonic_restraints_file.type = "file"
  Integer tabu1 = 0
  Integer tabu2 = 0
  Float tabu_dist = 10
  form {
    tabu1.add_header("After the first run, there comes a number of initial tabu runs. Then, the top 10 generated structures of each run get recombined with the result of it1 of run 1, and then subsequent tabu runs are performed")
    tabu1.name = "Number of initial tabu runs"
    tabu2.name = "Number of subsequent tabu runs"
    tabu_dist.name = "Tabu RMSD distance (angstroms)"
  }
  Enum score_method("gvm", "corr") = "gvm"
  ## form score_method.type = None
  Float score_threshold = 10.0
  ##form score_threshold.add_header("Low gradients in the map are excluded from the GVM computation")
  ##form score_threshold.add_header("The threshold below is in Daltons, between neighboring voxels of 5 A")
  ##form score_threshold.add_header("For smaller or larger voxels, this threshold is scaled, but a hard minimum of 2 Da is enforced")
  ##form score_threshold.name = "Gradient threshold (Daltons)"
  Integer nstruc = 3000
  ##form nstruc.name = "Number of structures during all stages"
  Integer ntop = 50
  ##form ntop.name = "Number of top structures to select before recombination"
  Float randsearch_radius = 35
  ##form randsearch_radius.name = "Radius for initial positioning of each molecule (angstroms)"  
  IntegerList iterations[5] = (1,1,1,1,8)
  ##form iterations.name = "The number of iterations for each of the 5 stages"
  IntegerList mcmax[4] = (250,250,250,250)
  ##form mcmax.name = "The number of steps for the Monte Carlo sampling in stage 1-4"
  Bool gravity = False #only in first stage
  ##form gravity.name = "Apply a gravity restraint in stage 1"
  Float rstk = 0.1 #only in first stage
  ## form rstk.name = "Strength of the gravity restraint"
  Float global_scale_rot = 0.785
  ##form global_scale_rot.name = "Global rotational step size(radians)"
  Float global_scale_trans = 20
  ##form global_scale_trans.name = "Global translational step size (angstroms)"
  Float clone_rot =  0.1
  ##form clone_rot.name = "Single rotational step (scaling factor) after each iteration"
  Float clone_center = 0.1
  ##form clone_center.name = "Single translational step (scaling factor) after each iteration"
  FloatList mcscalerot[4] = (0.5,0.25,0.1,0.1)
  ##form mcscalerot.name = "Rotational step scaling factors for the Monte Carlo sampling in stage 1-4"
  FloatList mcscalecenter[4] = (0.5,0.25,0.1,0.1)
  ##form mcscalecenter.name = "Translational step scaling factors for the Monte Carlo sampling in stage 1-4"
  form {
    _g = "Sampling"
    harmonic_restraints_file.group = _g
    tabu1.group = _g
    tabu2.group = _g
    tabu_dist.group = _g
    score_method.group = _g
    score_threshold.group = _g
    nstruc.group = _g
    ntop.group = _g
    iterations.group = _g
    global_scale_rot.group = _g
    global_scale_trans.group = _g
    clone_rot.group = _g
    clone_center.group = _g
    mcscalerot.group = _g
    mcscalecenter.group = _g
    mcmax.group = _g
    randsearch_radius.group = _g
    gravity.group = _g
    rstk.group = _g
  }

  String runname = "attract-em"
  form {
    runname.add_header("Please supply a name for your docking run (one word)")
    runname.name = "Name of the docking run"
  }
  validate {
    runname = runname.strip()
    self.runname = runname
    if not runname.replace("_","").replace("-","").isalnum():
      raise ValueError("The name of your run may contain only letters, digits, _ and -")
  }
  Integer threads = 8
  Bool use_gpu = True
  form {
    g = "Cryo-EM data"
    mapfile.group = g
    mapfilename.type = None
    mapfile.name = "Upload your density map in SITUS format"
  }
  form {
    runname.group = "Computation"
    threads.group = "Computation"
    use_gpu.group = "Computation"
    use_gpu.name = "Use GPU acceleration (requires PyCUDA)"
  }

  validate {
    assert len(partners) > 1
    assert nstruc > 0
    assert ntop > 0
    assert float(nstruc)/ntop == int(nstruc/ntop)
    for it in iterations: assert it >= 0
  }
}

Type CryoEasyInterface {
  CryoPartnerInterfaceArray partners = []
  ## form partners.length = 6
  ## form partners.form = "soft"
  ## form partners.count_from_one = True
  AxSymmetryArray axsymmetry = []
  ## form axsymmetry.length = 3
  ## form axsymmetry.form = "soft"
  ## form axsymmetry.count_from_one = True
  ## form axsymmetry.name = "Generative symmetry operators"
  validate {
    for a in axsymmetry: assert a.molecule <= len(partners)
  }

  *ResourceData_CryoEM_SITUS mapfile
  ## form mapfile.type = "file"
  *String mapfilename
  validate {
    assert not (mapfile is None and mapfilename is None)
    assert mapfile is not None or mapfilename is not None
  }

  String runname = "attract-em"
  form {
    runname.add_header("Please supply a name for your docking run (one word)")
    runname.name = "Name of the docking run"
  }
  validate {
    runname = runname.strip()
    self.runname = runname
    if not runname.replace("_","").replace("-","").isalnum():
      raise ValueError("The name of your run may contain only letters, digits, _ and -")
  }

  Bool use_gpu = True
  Integer threads = 8
  validate {
    assert len(partners) > 1
  }
  form {
    g = "Cryo-EM data"
    mapfile.group = g
    mapfilename.type = None
    mapfile.name = "Upload your density map in SITUS format"
  }
  
  form {
    runname.group = "Computation"
    threads.group = "Computation"
    use_gpu.group = "Computation"
    use_gpu.name = "Use GPU acceleration (requires PyCUDA)"
  }
}

Define CryoInterface(CryoEasyInterface m) {
  ret = CryoInterface(m)
  if not len(m.axsymmetry):
    ret.gravity = True

  mp1 = len(m.partners)
  if mp1 > 3: mp1 = 3
  dof_factor = 2 ** (mp1 + 1)
  ret.nstruc = 3000 * mp1 * dof_factor
  ret.ntop = 300 * mp1

  rotscalefactor = 1.0/len(m.partners)
  ret.global_scale_rot *= rotscalefactor
  ret.global_scale_trans *= rotscalefactor

  mp2 = len(m.partners)
  if mp2 > 1:
    ret.mcmax[0] *= mp2/2.0
    ret.mcmax[1] *= mp2/2.0  
  if mp2 <= 2:
    ret.iterations[1] = 3
    ret.iterations[2] = 0
    ret.iterations[3] = 0
  else:
    ret.iterations[1] = mp2  
    ret.iterations[2] = 2 * (mp2-1) + 1
    ret.iterations[3] = 2 * (mp2-1) + 1
  ret.iterations[4] = 12 * (mp2-1) + 8

  if mp2 > 1:
    ret.tabu1 = 5
    ret.tabu2 = 4
  else:
    ret.tabu1 = 2
    ret.tabu2 = 0

  ret.validate()
  return ret
}

Method generate(CryoInterface) generate_cryo
