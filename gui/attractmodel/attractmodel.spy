Type Data_ATTRACT_Structures:Data{}
Type Data_ATTRACT_Rotations:Data{}
Type Data_ATTRACT_Translations:Data{}
Type Data_ATTRACT_Modes:Data{}
Type Data_ATTRACT_CryoEM_data:Data{}
Type Data_ATTRACT_Grid:Data{}

Type Data_TXT_FileList_PDB:Data{}

Type AttractSymmetry {
  Enum symmetry("Cx","Dx") = "Cx"
  IntegerArray partners = []
  validate {
    assert len(partners) > 1
    if symmetry == "Dx": assert len(partners) == 4
  }
}

Type AttractPartnerInterface {
  ## form pdb.name = "Structure definition"
  PDBInterface pdb
  
  ## form r.name = "Restraint definition"
  ## form r.type = "required"
  RestraintsInterface r = RestraintsInterface()
    
  ## form moleculetype.name = "What kind of molecule are you docking?"
  ## form moleculetype.optiontitles = "Protein/peptide/small ligand", "DNA", "RNA"
  Enum moleculetype("Protein", "DNA", "RNA") = "Protein"
  
  ## form is_reduced.name = "The molecule is already in reduced form"
  Bool is_reduced = False
  
  Bool generate_modes = False
  *File modes_file 
  ## form modes_file.type = "required"
  ## form modes_file.file = "Data_ATTRACT_Modes"  
  *Integer nr_modes
  ## form nr_modes.type = "required"
  ## validate if generate_modes: assert nr_modes is not None
  ## validate if nr_modes is not None: assert nr_modes > 0 and nr_modes <= 10
  
  *String gridname
  ## form gridname.type = "required"
  
  *File ensemble_list
  ## form ensemble_list.type = "required"
  ## form ensemble_list.file = "Data_TXT_FileList_PDB"
  *Integer ensemble_size
  ## form ensemble_size.type = "required"
  ## validate assert ensemble_size is None or ensemble_size > 0
  
  Bool auto_his = True  
  HistidineStateArray his = []
  Bool charged_nter = True
  Bool charged_cter = True
  
  Bool deflex = False
  ## form deflex.add_header("If you perform RMSD analysis, you may remove all flexibility (ensemble and modes) before RMSD analysis")
  ## form deflex.name = "Remove flexibility" 

  *File_PDB rmsd_pdb
  ## form rmsd_pdb.type = "required"
  ## form rmsd_pdb.file = "Data_PDB"
  Bool lrmsd_ca = True
  ## form lrmsd_ca.name = "Select only C-alpha atoms for lRMSD calculation"
  *File_PDB collect_pdb
  ## form collect_pdb.type = "required"
  ## form collect_pdb.file = "Data_PDB"
  *File collect_ensemble_list
  ## form collect_ensemble_list.type = "required"
  ## form collect_ensemble_list.file = "Data_TXT_FileList_PDB"

  form {
    """
    For now, disable advanced features
    """
    r.type = None
    moleculetype.type = None
    auto_his.type = None
    his.type = None
    his.length = 10
    charged_nter.type = None
    charged_cter.type = None
  }  
  validate {
    assert (ensemble_size is None) == (ensemble_list is None)
    assert is_reduced == False or pdb.code is None
  }
}

Type AttractGrid {
  String gridname = ""
  *File gridfile
  form {
    gridfile.type = "required"
    gridfile.file = "Data_ATTRACT_Grid"
    gridfile.add_header("If a grid file has been previously generated, you can specify it here")
  }
  Bool omp = False
  Bool torque = False
  Bool mask_interior = False
  Float plateau_distance = 10.0
  Float neighbour_distance = 12.0 
  Bool calc_potentials = True
  validate {
    assert len(gridname) > 0
  }
}

Type AttractIteration {
  *Float rcut
  ##form rcut.type = "required"
  ##form rcut.default = 1500.0  
  *Integer vmax
  ##form vmax.type = "required"
  ##form vmax.default = 100
  Bool traj = False
  validate {
   if rcut != None: assert rcut > 0
   if vmax != None: assert vmax > 0
  }
  
  Bool mc = False
  *Float mctemp = 3.5
  *Float mcscalerot = 0.05
  *Float mcscalecenter = 0.1
  *Float mcscalemode = 0.1
  *Float mcensprob = 0.1
  form {
    mc.group = "Monte Carlo"
    mc.name = "Enable Monte Carlo mode"
    mctemp.type = "required"
    mctemp.group = "Monte Carlo"
    mcscalerot.type = "required"
    mcscalerot.group = "Monte Carlo"
    mcscalecenter.type = "required"
    mcscalecenter.group = "Monte Carlo"
    mcscalemode.type = "required"
    mcscalemode.group = "Monte Carlo"
    mcensprob.type = "required"
    mcensprob.group = "Monte Carlo"
  }
  validate {
    assert mctemp is None or mctemp > 0
    assert mcensprob is None or (mcensprob >= 0 and mcensprob <= 1)
  }  
}

Type AttractModel {
  String runname
  AttractPartnerInterfaceArray partners
  form {
    partners.length = 10
    partners.name = "Docking partner"
    partners.count_from_one = True  
  }
  AttractGridArray grids = []
  form {
    grids.length = 5
    grids.group = "Grids"
    grids.name = "Grid"
    grids.count_from_one = True
  }  
  AttractSymmetryArray symmetries = []
  form {
    symmetries.length = 5
    symmetries.name = "Symmetry"
    symmetries.count_from_one = True
    symmetries[None].partners.length = 12
    symmetries[None].partners.count_from_one = True
  }  
  Integer nr_iterations = 1
  AttractIterationArray iterations = []
  form {  
    nr_iterations.group = "Iteration parameters"
    iterations.group = "Iteration parameters"
    iterations.length = 5
    iterations[0].name = "First iteration"
    iterations[1].name = "Second iteration"
    iterations[2].name = "Third iteration"
    iterations[3].name = "Fourth iteration"
    iterations[4].name = "Fifth iteration"
  }  
  
  Integer gravity
  ##form gravity.type = "option"
  ##form gravity.options = (0,1,2,3,4,5)
  ##form gravity.optiontitles = ("No gravity", "To global origin", "To receptor", "To all ligands", "Cryo-EM pre-assembly stage mode", "Cryo-EM assembly stage mode")
  *Float rstk
  ##form rstk.type = "required"
  ##form rstk.default = 0.2
  
  Bool fix_receptor = False
  Float epsilon = 15
  ## form dielec.name = "Use constant (cdie) or distance-dependent (rdie) dielectric"
  Enum dielec("cdie", "rdie") = "rdie"

  Enum search("syst","random", "custom")
  ##form search.optiontitles = "Systematic","Random", "Custom"
  Integer structures = 10000
  ##form structures.name = "Number of structures for random search"
  *File start_structures_file
  ##form start_structures_file.type = "required"
  ##form start_structures_file.file = "Data_ATTRACT_Structures"
  Bool start_structures_ensemble = False
  *File rotations_file
  ##form rotations_file.type = "required"
  ##form rotations_file.file = "Data_ATTRACT_Rotations"
  *File translations_file
  ##form translations_file.type = "required"
  ##form translations_file.file = "Data_ATTRACT_Translations"
  validate {
    if start_structures_ensemble == True:
      assert start_structures_file is not None
    if search != "custom":
      assert rotations_file is None
      assert translations_file is None
      assert start_structures_file is None
      if search == "syst": assert len(partners) == 2
    elif start_structures_file is not None:
      assert rotations_file is None
      assert translations_file is None
    else:
      assert rotations_file is not None or \
       translations_file is not None      
      assert len(partners) == 2 
  }
  
  Enum forcefield("ATTRACT", "OPLSX") = "ATTRACT"
  Bool ghost = False

  *File cryoem_data
  form {
    cryoem_data.type = "required"
    cryoem_data.name = "Cryo-EM .inp data file"
    cryoem_data.file = "Data_ATTRACT_CryoEM_data"
  }  
  
  Bool rescoring = True
  Float rcut_rescoring = 50.0
  
  Bool sort = True
  Bool deredundant = True
  Bool deredundant_ignorens = True
  form {
    sort.name = "Sort the final structures according to ATTRACT energy"
    deredundant.name = "Remove redundant structures"
    deredundant_ignorens.name = "Ignore ensemble conformations for redundancy"
  }
  Bool calc_lrmsd = False
  Bool calc_irmsd = False
  #for now, don't calculate irmsd 
  ## form calc_irmsd.type = "none" ### 

  Bool collect = True
  Integer nr_collect = 50
  
  Integer np = 1
  ## form np.name = "Number of cores"
  Integer jobsize = 1000
  ## form jobsize.name = "Number of structures in a single job"
  
  *String header = "#PBS -l nodes=1:ppn=12\n#PBS -l walltime=6:30:00\n#PBS -j oe\ncd $PBS_O_WORKDIR\n\nATTRACTDIR=/home/sjoerd/data/work/attract/bin\nATTRACTTOOLS=\"/home/sjoerd/data/work/attract/tools\""
  ## form header.type = "textarea"
  ## form header.cols = 80
  ## form header.rows = 50

  validate {
    #TODO: grid alphabet
    gridnames = set([g.gridname for g in grids])
    for partner in partners:
      if partner.gridname is not None:
        assert partner.gridname in gridnames, partner.gridname     
    #TODO: mixed-model docking (e.g. some partners coarse-grained, others all-atom)
  }
}

Method generate(AttractModel) generate
