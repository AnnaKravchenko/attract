Type Data_ATTRACT_Structures:Data{}
Type Data_ATTRACT_Rotations:Data{}
Type Data_ATTRACT_Translations:Data{}
Type Data_CNS_Restraints:Data{}

Type DCoordinate:Coordinate {
  """Class for 3D (x,y,z) coordinates.
     x, y, z are optional and default to zero
  """
  Delete x
  Delete y
  Delete z
  Float x = 0
  Float y = 0
  Float z = 0
}

Type DVector:DCoordinate {
  """Fork of Coordinate that ensures a length of 1
     x, y, z are optional and default to zero
  """
  Delete form
  form {
    x.min = -1
    x.max = 1
    x.default = 0
    x.digits = 5
    y.min = -1
    y.max = 1
    y.default = 0
    y.digits = 5
    z.min = -1
    z.max = 1
    z.default = 0
    z.digits = 5
  }
  validate {
    assert abs(x**2+y**2+z**2 - 1) < 0.001
  }
}

Type AttractSymmetry {
  *DVector symmetry_axis
  *DCoordinate symmetry_origin
  form {
    symmetry_axis.add_header("You can use generative symmetry or distance-restrained symmetry")
    symmetry_axis.add_header("If you want to use generative symmetry:")
    symmetry_axis.add_header(" - Provide an explicit symmetry axis and origin")
    symmetry_axis.add_header(" - Provide an explicit symmetry fold")
    symmetry_axis.add_header(" - Specify a single reference symmetry partner")
    symmetry_axis.add_header(" - In the Docking Partner section, only define the reference partner structure")
    symmetry_axis.add_header("If you want to use distance-restrained symmetry:")
    symmetry_axis.add_header(" - Do not provide explicit symmetry axis and origin")
    symmetry_axis.add_header(" - Specify all symmetry partners that are to be restrained")
    symmetry_axis.add_header(" - In the Docking Partner section, specify all partner structures, which must be identical")
    symmetry_axis.name = "Generative symmetry axis"
    symmetry_origin.name = "Origin for generative symmetry axis"
  }
  *Integer symmetry_fold
  form {
    symmetry_fold.name = "Symmetry fold (2-fold, 3-fold, ...)"
  }
  validate {
    if symmetry_fold is not None: assert symmetry_fold > 1
  }
  Enum symmetry("Cx","Dx") = "Cx"
  validate {
    if symmetry_origin is not None: assert symmetry_axis is not None
  }
  IntegerArray partners = []
  form {
    partners.form = "soft"
  }
  validate {
    if symmetry_axis is not None:
      assert len(partners) == 1
      assert symmetry_fold is not None
      assert symmetry == "Cx"
    else:
      assert len(partners) > 1
      assert symmetry_fold is None or symmetry_fold == len(partners)
      if symmetry == "Dx": assert len(partners) == 4
  }
  error {
    'if symmetry is not None: assert symmetry in ("Cx","Dx")'
    =>
    ''

    'if symmetry_origin is not None: assert symmetry_axis is not None'
    =>
    'If you specify a symmetry origin, you must also supply a symmetry axis'

    'if symmetry == "Dx": assert len(partners) == 4'
    =>
    'With Dx-symmetry and no symmetry axis, the number of partners must be 4, not {len(partners)}'

    'assert len(partners) == 1'
    =>
    'If you define a symmetry axis, you must define exactly one symmetry partner, not {len(partners)}'

    'assert len(partners) > 1'
    =>
    "If you don't define a symmetry axis, you have define at least 2 symmetry partners, not {len(partners)}"
  }
}

Type HaddockRestraintsInterface {
  """
  Definition of HADDOCK Ambiguous Interaction Restraints (AIRs)
  Lists of active and passive residues must be provided
  """
  ## form activereslist.add_header("Please supply residues as comma-separated lists of residue numbers")
  ## form activereslist.name = "Active residues (directly involved in the interaction)"
  ## form passivereslist.name = "Passive residues (surrounding surface residues)"
  ## form auto_passive.name = "Define passive residues automatically around the active residues"
  ## form activereslist.type = "text"
  ## form passivereslist.type = "text"
  HaddockResidueList activereslist = []
  HaddockResidueList passivereslist = []
  Bool auto_passive = False
  validate {
    assert not (auto_passive and len(passivereslist))
  }
  error {
    'assert not (auto_passive and len(passivereslist))'
    =>
    'You manually defined passive residues, but also that they should be determined automatically'
  }
}

Type AttractPartnerInterface {
  ## form pdbfile.type = "file"
  ## form pdbfile.name = "Structure file"
  *ResourceData_PDB pdbfile

  *String gridname
  ## form gridname.name = "Name of the grid to use for this molecule"

  ## form chain.name = "Which chain of the structure must be used?"
  ## form chain.options = "All", "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"
  String chain = "All"

  *HaddockRestraintsInterface haddock_restraints
  ## form haddock_restraints.name = "Definition of residues for HADDOCK AIR restraints (optional)"
  ## form haddock_restraints.auto_passive.type = None #TODO: disabled for now

  Enum moleculetype("Protein", "DNA", "RNA") = "Protein"
  ## form moleculetype.name = "What kind of molecule are you docking?"
  ## form moleculetype.optiontitles = "Protein/peptide", "DNA", "RNA"

  Bool generate_modes = False
  ## form generate_modes.name = "Generate harmonic modes"
  Bool aacontact_modes = False
  ## form aacontact_modes.name = "Use all-atom contact spring constants in mode generation"
  Integer nr_modes = 0
  form {
    nr_modes.name = "Number of harmonic modes to select"
    nr_modes.type = "option"
    nr_modes.options = list(range(0,10+1))
    nr_modes.optiontitles = ["No modes"] + [str(v) for v in nr_modes.options[1:]]
  }
  ## validate if nr_modes != 0: assert nr_modes >= 1 and nr_modes <= 10
  ## validate if generate_modes: assert nr_modes != 0
  ## validate if nr_modes != 0: assert generate_modes

  Bool ensemble = False
  ## form ensemble.name = "The PDB is a multi-model ensemble"
  Integer ensemble_size = 0
  ## form ensemble_size.name = "Number of conformers in the ensemble"
  ## validate if ensemble_size != 0: assert ensemble_size >= 1
  *Enum ensemblize("random","all","custom")
  ## form ensemblize.name = "Ensemble search"
  ## form ensemblize.optiontitles = "Random", "All", "Custom (none)"

  Bool has_hydrogens = False
  ## form has_hydrogens.name = "The PDB file contains all necessary atoms, including polar hydrogens"
  Bool charged_termini = False
  ## form charged_termini.name = "Add charged termini to each chain"

  *ResourceData_PDB rmsd_pdb
  ## form rmsd_pdb.add_header("You can specify a PDB file to use as reference in RMSD calculations")
  ## form rmsd_pdb.add_header("Leave blank to use the docked PDB instead (bound conformation = unbound conformation)")
  ## form rmsd_pdb.name = "RMSD PDB file"
  ## form rmsd_pdb.type = "file"
  *ResourceData_PDB rmsd_pdb_alt
  ## form rmsd_pdb_alt.add_header("It is possible to specify alternative references ")
  ## form rmsd_pdb_alt.name = "Alternative RMSD PDB file"
  ## form rmsd_pdb_alt.type = "file"
  *ResourceData_PDB rmsd_pdb_alt2
  ## form rmsd_pdb_alt2.name = "Alternative RMSD PDB file 2"
  ## form rmsd_pdb_alt2.type = "file"
  validate {
    if rmsd_pdb_alt is not None: assert rmsd_pdb is not None
    if rmsd_pdb_alt2 is not None: assert rmsd_pdb_alt is not None
  }
  error {
    'if rmsd_pdb_alt is not None: assert rmsd_pdb is not None'
    =>
    'If you specify an alternative RMSD reference, also provide a main PDB reference'

    'if rmsd_pdb_alt2 is not None: assert rmsd_pdb_alt is not None'
    =>
    'You specified a second alternative RMSD reference, but not a first alternative'
  }
  validate {
    if chain not in ("All", "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"):
       raise spyder.core.ValidationError("Please provide a chain")
    if ensemble:
      assert ensemble_size > 1
      assert ensemblize is not None
    else:
      assert (ensemble_size in (0,1)) == (ensemblize is None)
  }
  error {
    'assert ensemblize is not None'
    =>
    'The ensemble search must be defined'

    'assert (ensemble_size in (0,1)) == (ensemblize is None)'
    =>
    'You must define the ensemble size and ensemble search, or none of the above'

    'if ensemblize is not None: assert ensemblize in ("random","all","custom")'
    =>
    ''

    'raise spyder.core.ValidationError("Please provide a chain")'
    =>
    ''

    'if nr_modes != 0: assert nr_modes >= 1 and nr_modes <= 10'
    =>
    'The number of modes must be between 1 and 10, not {nr_modes}'


    'if moleculetype is not None: assert moleculetype in ("Protein", "DNA", "RNA")'
    =>
    ''

    'assert ensemble_size > 1'
    =>
    'You must define an ensemble size larger than 1, not {ensemble_size}'

    'if ensemble_size != 0: assert ensemble_size >= 1'
    =>
    'If you define an ensemble size, it must at least 1, not {ensemble_size}'

    'if generate_modes: assert nr_modes != 0'
    =>
    'Please define the number of modes you want to generate'

    'if nr_modes != 0: assert generate_modes'
    =>
    'You defined a number of modes, but you did not turn on harmonic mode generation'
  }
}

Type AttractGrid:Degenerate {
  String gridname = ""
  ## form gridname.name = "Name of this grid"
  validate {
    gridname = gridname.strip()
    assert len(gridname) > 0
    self.gridname = gridname
    if not gridname.replace("_","").replace("-","").isalnum():
      raise ValueError("The name of the grid may contain only letters, digits, _ and -")
  }

  ## form omp.add_header("Do you want to calculate the grid on multiple cores using OpenMP?")
  Bool omp = True
  ## form torque.add_header("Is the grid a torque grid?")
  Bool torque = False
  Float plateau_distance = 10.0
  ## form plateau_distance.name = "Plateau distance (A) for grid calculation"
  Float neighbour_distance = 12.0
  ## form neighbour_distance.name = "Neighbor list cutoff (A) for grid calculation"
  Bool calc_potentials = True
  ## form calc_potentials.name = "Calculate long-range potentials on the grid"
  error {
    'raise ValueError("The name of the grid may contain only letters, digits, _ and -")'
    =>
    ''

    'assert len(gridname) > 0'
    =>
    'The grid name must be defined'
  }
}

Type AttractIteration {
  ## form rcut.add_header("The nonbonded pairlist distance cutoff (rcut) (in A**2) during this iteration")
  Float rcut = 1500
  ## form vmax.add_header("The maximum number of energy minimization or Monte Carlo steps (vmax)")
  Integer vmax = 100
  ## form traj.add_header("Trajectory mode: only minimize the first structure, and output the structure after every minimization step")
  ## form traj.name = "Trajectory mode"
  Bool traj = False
  validate {
    assert rcut > 0
    assert vmax > 0
  }
  Bool prep = False
  ## form prep.add_header("Preparation mode: only minimizes the orientation of the molecules, without forcefield")
  ## form prep.name = "Preparation mode"
  Float restweight = 1
  ## form restweight.name = "Distance restraint weight"
  Bool mc = False
  Float mctemp = 3.5
  Float mcscalerot = 0.05
  Float mcscalecenter = 0.1
  Float mcscalemode = 0.1
  Float mcensprob = 0.1
  form {
    mc.group = "Monte Carlo"
    mc.name = "Enable Monte Carlo mode"
    mctemp.group = "Monte Carlo"
    mctemp.name = "Temperature (in kT)"
    mcscalerot.group = "Monte Carlo"
    mcscalerot.name = "Rotation step size (in radians)"
    mcscalecenter.group = "Monte Carlo"
    mcscalecenter.name = "Translation step size (in angstroms)"
    mcscalemode.group = "Monte Carlo"
    mcscalemode.name = "Mode deformation step size (in angstroms)"
    mcensprob.group = "Monte Carlo"
    mcensprob.name = "Probability to switch between ensemble conformers"
  }
  validate {
    assert mctemp > 0
    assert mcensprob >= 0 and mcensprob <= 1
  }
    error {
    'assert rcut > 0'
    =>
    'The distance cutoff must be larger than 0, not {rcut}'

    'assert vmax > 0'
    =>
    'The maximum number of energy minimizations must be larger than 0, not {vmax}'

    'assert mcensprob >= 0 and mcensprob <= 1'
    =>
    'The Monte Carlo ensemble replacement probability must be between 0 and 1, not {mcensprob}'

    'assert mctemp > 0'
    =>
    'The Monte Carlo temperature must be larger than 0, not {mctemp}'
  }
}

Type AttractAtomDensityGrid {
  Float voxelsize
  Integer dimension = 50
  Float forceconstant = 1000.0
  form {
    voxelsize.name = "Voxel size (A)"
    dimension.name = "Grid dimension (voxels)"
    forceconstant.name = "Force constant"
  }
  validate {
    assert voxelsize > 0
    assert dimension > 0
    assert forceconstant > 0
  }
}

Type IAttractParameters {
  Integer nstruc
  Float icut = 3.0
  form {
    nstruc.name = "Number of structures to refine"
    icut.name = "Distance cutoff for flexible residues"
  }
  validate {
    assert nstruc > 0
    assert icut > 0
  }
  error {
    'assert icut > 0'
    =>
    'Number of structures to refine must be positive'

    'assert nstruc > 0'
    =>
    'Distance cutoff for flexible residues must be positive'
  }
}

Type AttractModel {
  String runname = "attract"
  form {
    runname.add_header("Please supply a name for your docking run (one word)")
    runname.name = "Name of the docking run"
  }
  validate {
    if runname is not None:
      runname = runname.strip()
      self.runname = runname
      if not runname.replace("_","").replace("-","").isalnum():
        raise ValueError("The name of your run may contain only letters, digits, _ and -")
  }

  AttractPartnerInterfaceArray partners
  form {
    partners.length = 10
    partners.name = "Docking partners"
    partners.form = "soft"
    for n in range(10):
      partners[n].name = "Docking partner %d" % (n+1)
      partners[n].group = "Docking partner %d" % (n+1)
  }
  validate {
    has_haddock = any([p.haddock_restraints for p in partners])
    nr_has_haddock = len([1 for p in partners if p.haddock_restraints])
    if has_haddock: assert nr_has_haddock > 1
    has_active = any([p.haddock_restraints.activereslist for p in partners if p.haddock_restraints])
    if has_haddock: assert has_active

    if len(partners) > 2:
      for p in partners: assert p.haddock_restraints is None
  }

  AttractGridArray grids = []
  form {
    grids.length = 10
    grids.group = "Grids"
    grids.name = "Grid"
    grids.form = "soft"
    grids.count_from_one = True
  }

  #***Iteration parameters***
  *Integer nr_iterations
  AttractIterationArray iterations = []
  form {
    nr_iterations.default = 1
    nr_iterations.group = "Iteration parameters"
    nr_iterations.name = "Number of iterations"
    iterations.group = "Iteration parameters"
    iterations.length = 5
    iterations.form = "soft"
    iterations[0].name = "First iteration"
    iterations[1].name = "Second iteration"
    iterations[2].name = "Third iteration"
    iterations[3].name = "Fourth iteration"
    iterations[4].name = "Fifth iteration"
  }
  validate {
    if nr_iterations is not None:
      assert nr_iterations > 0 or search == "custom"
      assert nr_iterations >= len(iterations)
    else:
      assert len(iterations) > 0 or search == "custom"
  }
  #***Sampling parameters***
  Bool fix_receptor = False
  ## form fix_receptor.name = "Fix the receptor during docking"
  Enum search("syst","random", "custom")
  ## form search.name = "Docking search"
  ## form search.optiontitles = "Systematic","Random", "Custom"
  validate {
    for p in partners:
      if p.ensemblize == "custom": assert search == "custom"
  }
  Integer structures = 10000
  ## form structures.name = "Number of structures for random search"
  Float randsearch_radius = 35
  ## form randsearch_radius.name = "Initial distance from center (radius) for random search"

  *ResourceData_ATTRACT_Structures start_structures_file
  ## form start_structures_file.type = "file"
  *ResourceData_ATTRACT_Rotations rotations_file
  ## form rotations_file.type = "file"
  *ResourceData_ATTRACT_Translations translations_file
  ## form translations_file.type = "file"
  *ResourceData_CNS_Restraints harmonic_restraints_file
  ## form harmonic_restraints_file.type = "file"
  *ResourceData_CNS_Restraints haddock_restraints_file
  ## form haddock_restraints_file.type = "file"
  *ResourceData_CNS_Restraints position_restraints_file
  ## form position_restraints_file.type = "file"
  Float restraints_score_weight = 0.01
  form {
    start_structures_file.add_header("Custom search files")
    start_structures_file.add_header("For a custom search, supply a starting structures file, OR: rotations and/or translations files")
    start_structures_file.name = "Starting structures file for custom search"
    rotations_file.name = "Rotations file for custom search"
    translations_file.name = "Translations file for custom search"
    harmonic_restraints_file.add_header("Distance restraints files")
    harmonic_restraints_file.name = "Harmonic distance restraints file (CNS/HADDOCK .tbl format)"
    haddock_restraints_file.name = "HADDOCK distance restraints file (CNS/HADDOCK .tbl format)"
    position_restraints_file.name = "Position restraints file (CNS/HADDOCK .tbl format)"
    restraints_score_weight.name = "Weight of all distance restraints during scoring"
  }
  validate {
    if search != "custom":
      assert rotations_file is None #1
      assert translations_file is None
      assert start_structures_file is None
      if search == "syst": assert len(partners) == 2
    elif start_structures_file is not None:
      assert rotations_file is None #2
      assert translations_file is None
    else:
      assert rotations_file is not None or translations_file is not None
      assert len(partners) == 2
  }
  Bool demode = False
  ## form demode.add_header("If you used flexibility in the form of normal modes or iATTRACT, you may choose remove the deformations (de-mode) after the docking")
  ## form demode.name = "De-mode"

  Integer keep_perconf = 0
  form {
    keep_perconf.add_header("During rigid-body docking, you may choose to keep a limited number of structures per conformer")
    keep_perconf.add_header("When the number of structures is very large (e.g. 100 000 structures x 100 conformers),")
    keep_perconf.add_header(" this option can save a large amount of disk space")
    keep_perconf.add_header("Currently, this option is only implemented for GPU docking")
    keep_perconf.add_header("A value of 0 means 'keep all structures per conformer'")
    keep_perconf.name = "Maximum number of structures per conformer to keep"
  }

  Bool use_iattract = True
  ## form use_iattract.name = "Perform iATTRACT refinement after the docking"
  *IAttractParameters iattract
  ## form iattract.name = "iATTRACT refinement"
  form {
    iattract.nstruc.default = 50
  }
  form {
    _g = "Sampling parameters"
    fix_receptor.group = _g
    search.group = _g
    structures.group = _g
    randsearch_radius.group = _g
    start_structures_file.group = _g
    rotations_file.group = _g
    translations_file.group = _g
    harmonic_restraints_file.group = _g
    haddock_restraints_file.group = _g
    position_restraints_file.group = _g
    restraints_score_weight.group = _g
    keep_perconf.group = _g
    use_iattract.group = _g
    iattract.group = _g
    demode.group = _g
  }
  #***

  #***Energy and interaction parameters***
  Integer gravity
  form {
    gravity.name = "Gravity"
    gravity.type = "option"
    gravity.options = (0,1,2,3,4,5)
    gravity.optiontitles = ("No gravity", "To global origin", "To receptor", "Between all ligands", "Cryo-EM pre-assembly stage gravity", "Cryo-EM assembly stage gravity")
  }

  Enum completion_tool("whatif", "pdb2pqr_whatif") = "pdb2pqr_whatif"
  form {
    completion_tool.add_header("External tool for PDB completion and hydrogens")
    completion_tool.add_header("NOTE: PDB2PQR requires a local installation")
    completion_tool.add_header("NOTE: PDB2PQR only completes proteins; WHATIF is used for nucleic acids")
    completion_tool.name = "PDB completion method"
    completion_tool.optiontitles = (
      "WHATIF web server",
      "PDB2PQR",
    )
  }

  Float rstk_dof = 0.01
  form {
    rstk_dof.name = "Restraining force constant for gravity and non-generative symmetry"
    rstk_dof.digits = 4
  }

  Float rstk_harmonic = 10.0
  form {
    rstk_harmonic.name = "Restraining force constant for harmonic distance restraints"
    rstk_harmonic.digits = 4
  }

  Float rstk_haddock = 1.0
  form {
    rstk_haddock.name = "Restraining force constant for AIRs and custom HADDOCK restraints"
    rstk_haddock.digits = 4
  }

  Float haddock_random_removal = 0.5
  form {
    haddock_random_removal.name = "Fraction of AIRs and HADDOCK restraints removed at random"
    haddock_random_removal.digits = 4
  }

  Float haddock_softsquare = 2.0
  form {
    haddock_softsquare.name = "Soft-square parameter (maximum violation after which the force becomes linear) for custom HADDOCK restraints"
    haddock_softsquare.digits = 4
  }

  Float rstk_position = 10.0
  form {
    rstk_position.name = "Restraining force constant for position restraints"
    rstk_position.digits = 4
  }


  Enum forcefield("ATTRACT", "OPLSX") = "ATTRACT"
  ## form forcefield.add_header("Which forcefield is to be used?")
  ## form forcefield.name = "Forcefield"
  Bool ghost = False
  ## form ghost.add_header("In ghost mode, the forcefield is turned off")
  ## form ghost.name = "Enable ghost mode"
  Bool ghost_ligands = False
  ## form ghost_ligands.add_header("In ghost-ligands mode, the forcefield is turned off between ligands (all partners beyond the first)")
  ## form ghost_ligands.name = "Enable ghost-ligands mode"
  validate {
    if ghost: assert not ghost_ligands
  }

  AttractAtomDensityGridArray atomdensitygrids = []
  ## form atomdensitygrids.length = 3
  ## form atomdensitygrids.count_from_one = True
  ## form atomdensitygrids.form = "soft"
  ## form atomdensitygrids.add_header("Instead of a forcefield, you can define an atom density grid to prevent clashes")
  ## form atomdensitygrids.name = "Atom density grid"

  Float epsilon = 15
  ## form epsilon.add_header("Epsilon constant for the electrostatic energy term")
  ## form epsilon.name = "Epsilon"

  Enum dielec("cdie", "rdie") = "rdie"
  ## form dielec.name = "Use constant (cdie) or distance-dependent (rdie) dielectric"
  form {
    _g = "Energy and interaction parameters"
    gravity.group = _g
    completion_tool.group = _g
    rstk_dof.group = _g
    rstk_harmonic.group = _g
    rstk_haddock.group = _g
    haddock_softsquare.group = _g
    haddock_random_removal.group = _g
    rstk_position.group = _g
    forcefield.group = _g
    ghost.group = _g
    ghost_ligands.group = _g
    atomdensitygrids.group = _g
    epsilon.group = _g
    dielec.group = _g
  }
  #***

  AttractSymmetryArray symmetries = []
  form {
    symmetries.length = 5
    symmetries.name = "Symmetry"
    symmetries.count_from_one = True
    symmetries.form = "soft"
    symmetries[None].symmetry.name = "Symmetry type"
    symmetries[None].partners.name = "Symmetry partners"
    symmetries[None].partners.length = 12
    for n in range(12):
      symmetries[None].partners[n].name = n+1
  }

  #**Analysis***
  Bool rescoring = True
  Float rcut_rescoring = 50.0
  Bool sort = True
  Bool rescore_step = False
  Integer max_rescore_step = 0
  validate {
    assert max_rescore_step >= 0
    if rescore_step: assert rescoring
    if rescore_step: assert max_rescore_step > 0
    if max_rescore_step > 0: assert rescore_step
    for p in partners:
      assert p.moleculetype in ("Protein", "Peptide") #step
      assert not p.generate_modes #step
  }
  error {
    'if rescore_step: assert rescoring'
    =>
    'Enable rescoring if you want to use the GRADSCOPT potential'

    'if rescore_step: assert max_rescore_step > 0'
    =>
    'Specify the number of top ATTRACT structures to apply the GRADSCOPT potential'

    'if max_rescore_step > 0: assert rescore_step'
    =>
    'Enable the GRADSCOPT potential if you specify the number of top ATTRACT structures to apply it to'

    'assert p.moleculetype in ("Protein", "Peptide") #step'
    =>
    'The GRADSCOPT step potential is only defined for proteins and peptides'

    'assert not p.generate_modes #step'
    =>
    'The GRADSCOPT step potential is not compatible with harmonic modes'
  }
  Bool deredundant = True
  Bool deredundant_ignorens = True
  Integer max_filt_analysis = 0
  Bool analyze_interface = False
  Integer nstruc_analyze_interface = 100
  validate {
  }
  Float analyze_interface_cutoff = 5
  Bool clustering = False
  Enum clustering_method("lrmsd") = "lrmsd"
  Float clustering_cutoff = 10
  Integer min_cluster_size = 1
  validate {
    assert clustering_cutoff > 0
    assert min_cluster_size > 0
    if clustering: assert max_rescore_step or max_filt_analysis or use_iattract
    max_clust = 999999999
    if max_filt_analysis:
      max_clust = max_filt_analysis
    if rescore_step is not None and max_rescore_step:
      max_clust = min(max_clust, max_rescore_step)
    if use_iattract:
      iattract_nstruc = 50
      if iattract is not None: iattract_nstruc = iattract.nstruc
      max_clust = min(max_clust, iattract_nstruc)
    if clustering and use_iattract: assert demode
    if analyze_interface and use_iattract: assert demode
    if clustering: assert max_clust <= 10000
    if clustering: assert min_cluster_size <= max_clust, max_clust
    if analyze_interface: assert nstruc_analyze_interface > 0
    if analyze_interface: assert nstruc_analyze_interface <= max_clust, max_clust
  }
  error {
    'if clustering: assert max_rescore_step or max_filt_analysis or use_iattract'
    =>
    'ATTRACT cannot cluster arbitrary numbers of structures. With clustering, you need to specify max_filt_analysis or enable iATTRACT or enable GRADSCOPT rescoring'

    'if clustering: assert max_clust <= 10000'
    =>
    'ATTRACT cannot cluster arbitrary numbers of structures. You asked it to cluster {max_struc} structures, which is more than the limit of 10000. Manually use fastcluster.py to cluster more structures'
  }
  Bool deflex = False
  ## form deflex.add_header("If you perform RMSD analysis, you may remove all flexibility (ensemble and modes) beforehand")
  ## form deflex.name = "Remove flexibility"
  Bool calc_lrmsd = False
  Enum rmsd_atoms("all","backbone","trace") = "backbone"
  Bool calc_irmsd = False
  Bool calc_fnat = False
  Bool collect = True
  Integer nr_collect = 50
  form {
    rescoring.add_header("RESCORING")
    rescoring.name = "Perform a rescoring step after docking"
    rcut_rescoring.add_header("The nonbonded pairlist distance cutoff (rcut) (in A**2) during rescoring")
    rcut_rescoring.name = "rcut (rescoring)"
    sort.name = "Sort the final structures according to forcefield energy"
    rescore_step.name = "Rescore the top docking solutions by the GRADSCOPT step potential"
    max_rescore_step.name = "Number of top ATTRACT structures to keep and then re-score with GRADSCOPT"
    max_filt_analysis.add_header("FILTERING")
    max_filt_analysis.add_header("If the generated number of structures is large,")
    max_filt_analysis.add_header(" it is possible to restrict the number of structures to filter/analyze")
    max_filt_analysis.add_header("A value of 0 means 'filter/analyze all structures'")
    max_filt_analysis.name = "Maximum number of structures to filter/analyze"
    deredundant.name = "Remove redundant structures after docking"
    deredundant_ignorens.name = "Ignore ensemble conformers for redundancy"
    analyze_interface.name = "Analyze the most frequent interface residues from the top docking solutions (before clustering)"
    nstruc_analyze_interface.name = "How many structures to select for interface analysis"
    analyze_interface_cutoff.name = "Minimum interface distance cutoff (A) for interface analysis"
  }
  form {
    clustering.add_header("It is possible to cluster the results")
    clustering.name = "Perform clustering"
    clustering_method.name = "Clustering method"
    clustering_method.optiontitles = ("Pairwise all-atom ligand RMSD",)
    clustering_cutoff.name = "Clustering cutoff (in A)"
    min_cluster_size.name = "Minimum cluster size"
  }
  form {
    calc_lrmsd.add_header("ANALYSIS")
    calc_lrmsd.name = "Calculate ligand RMSD after docking"
    rmsd_atoms.name = "Which atoms to use in RMSD calculation"
    rmsd_atoms.optiontitles = (
      "All heavy atoms",
      "Protein backbone",
      "Trace (CA or P; ligand RMSD only)"
    )
    calc_irmsd.name = "Calculate interface RMSD after docking"
    calc_fnat.name = "Calculate fraction of native contacts after docking"
    collect.name = "Collect the structures as PDBs after docking"
    nr_collect.name = "Number of structures to collect"
  }
  form {
    _g = "Rescoring and analysis"
    rescoring.group = _g
    sort.group = _g
    rescore_step.group = _g
    max_rescore_step.group = _g
    rcut_rescoring.group = _g
    deredundant.group = _g
    deredundant_ignorens.group = _g
    analyze_interface.group = _g
    nstruc_analyze_interface.group = _g
    analyze_interface_cutoff.group = _g
    clustering.group = _g
    clustering_method.group = _g
    clustering_cutoff.group = _g
    min_cluster_size.group = _g
    deflex.group = _g
    max_filt_analysis.group = _g
    calc_lrmsd.group = _g
    rmsd_atoms.group = _g
    calc_irmsd.group = _g
    calc_fnat.group = _g
    collect.group = _g
    nr_collect.group = _g
  }
  validate {
    has_axsym = any([sym.symmetry_axis is not None for sym in symmetries])
    if has_axsym: assert not rescore_step
    if has_axsym: assert not calc_lrmsd
    if has_axsym: assert not calc_irmsd
    if has_axsym: assert not calc_fnat
    if has_axsym: assert not use_iattract
    if has_axsym: assert not deredundant
  }
  error {
    'if has_axsym: assert not rescore_step'
    =>
    'The GRADSCOPT step potential is not compatible with generative symmetry'

    'if has_axsym: assert not calc_lrmsd'
    =>
    'Ligand RMSD calculation is not compatible with generative symmetry'

    'if has_axsym: assert not calc_irmsd'
    =>
    'Interface RMSD calculation is not compatible with generative symmetry'

    'if has_axsym: assert not calc_fnat'
    =>
    'Fnat calculation is not compatible with generative symmetry'

    'if has_axsym: assert not use_iattract'
    =>
    'iATTRACT is not compatible with generative symmetry'

    'if has_axsym: assert not deredundant'
    =>
    'Deredundant is not compatible with generative symmetry'

  }
  validate {
    if max_filt_analysis: assert not use_iattract
    if max_filt_analysis: assert sort
  }
  error {
    'if max_filt_analysis: assert not use_iattract'
    =>
    'Maximum number of structures to analyze is not compatible with iATTRACT refinement'

    'if max_filt_analysis: assert sort'
    =>
    'Maximum number of structures to analyze requires sorting'
  }
  validate {
    if len(partners) and calc_lrmsd: assert partners[0].rmsd_pdb_alt is None
    for p in partners[1:]:
      if calc_lrmsd and rmsd_atoms == "backbone": assert p.moleculetype == "Protein"
    for p in partners[2:]:
      if calc_lrmsd and rmsd_atoms == "trace" and partners[1].moleculetype == "Protein": assert p.moleculetype == "Protein"
      if calc_lrmsd and rmsd_atoms == "trace" and partners[1].moleculetype in ("DNA", "RNA"): assert p.moleculetype in ("DNA", "RNA")
  }
  #***

  #***Computing and parallelization parameters***

  Enum use_gpu("never","if_available",  "always") = "never"
  form {
    use_gpu.group = "Computing and parallelization parameters"
    use_gpu.name = "Use GPU acceleration (experimental!)"
    use_gpu.optiontitles = (
      "Never",
      "If available",
      "Always",
    )
  }
  validate {
    if use_gpu != "never":
      use_grids = any([p.gridname for p in partners])
      assert use_grids #gpu
      assert len(partners) == 2 #gpu
      assert harmonic_restraints_file is None #gpu
      assert position_restraints_file is None #gpu
      assert haddock_restraints_file is None #gpu
      for g in grids:
        assert not g.torque #gpu
        assert g.calc_potentials #gpu
      for it in iterations:
        assert not it.traj #gpu
        assert not it.prep #gpu
        assert not it.mc #gpu
      for p in partners:
        assert not p.generate_modes #gpu
        assert p.haddock_restraints is None #gpu
      assert partners[1].gridname is None #gpu
      assert partners[0].ensemble_size in (0,1) #gpu
      assert fix_receptor #gpu
      assert not gravity #gpu
      assert not ghost #gpu
      assert len(atomdensitygrids) == 0 #gpu
      assert len(symmetries) == 0 #gpu

  }
  error {
    'assert use_grids #gpu'
    =>
    'GPU acceleration must be combined with grids'

    'assert len(partners) == 2 #gpu'
    =>
    'GPU acceleration is not compatible with multi-body docking'

    'assert not p.generate_modes #gpu'
    =>
    'GPU acceleration is not compatible with harmonic modes'

    'assert p.haddock_restraints is None #gpu'
    =>
    'GPU acceleration is not compatible with HADDOCK restraints'

    'assert haddock_restraints_file is None #gpu'
    =>
    'GPU acceleration is not compatible with a HADDOCK restraints file'

    'assert harmonic_restraints_file is None #gpu'
    =>
    'GPU acceleration is not compatible with a harmonic restraints file'

    'assert position_restraints_file is None #gpu'
    =>
    'GPU acceleration is not compatible with a position restraints'

    'assert partners[0].ensemble_size in (0,1) #gpu'
    =>
    'GPU acceleration is not compatible with receptor ensemble docking'

    'assert fix_receptor #gpu'
    =>
    'GPU acceleration requires the receptor to be fixed'

    'assert not gravity #gpu'
    =>
    'GPU acceleration is incompatible with gravity'

    'assert not ghost #gpu'
    =>
    'GPU acceleration is incompatible with ghost mode'

    'assert len(atomdensitygrids) == 0 #gpu'
    =>
    'GPU acceleration does not support atom density grids'

    'assert len(symmetries) == 0 #gpu'
    =>
    'GPU acceleration does not support symmetries'

    'assert not g.torque #gpu'
    =>
    'GPU acceleration does not support torque grids'


    'assert g.calc_potentials #gpu'
    =>
    'GPU acceleration does not support neighbourlist-only grids'

    'assert not it.traj #gpu'
    =>
    'GPU acceleration is incompatible with trajectory mode'

    'assert not it.prep #gpu'
    =>
    'GPU acceleration is incompatible with preparation mode'

    'assert not it.mc #gpu'
    =>
    'GPU acceleration + Monte Carlo has not yet been implemented in the protocol generator'

    'assert partners[1].gridname is None #gpu'
    =>
    'GPU acceleration cannot be combined with a grid on the second partner (ligand)'
  }

  Integer np = 4
  ## form np.group = "Computing and parallelization parameters"
  ## form np.name = "Number of processor cores"
  Integer jobsize = 0
  ## form jobsize.group = "Computing and parallelization parameters"
  ## form jobsize.name = "Number of structures in a single job (leave blank to divide all structures equally over the cores)"
  Enum gpu_temp("/dev/shm", "/tmp", "/scratch") = "/dev/shm"
  ## form gpu_temp.group = "Computing and parallelization parameters"
  ## form gpu_temp.name = "Temporary directory for multi-conformer GPU-based docking intermediate files"


  *String header = ""
  ## form header.group = "Computing and parallelization parameters"
  ## form header.name = "Header for docking protocol script"
  ## form header.type = "textarea"
  ## form header.cols = 80
  ## form header.rows = 50

  *String footer = ""
  ## form footer.group = "Computing and parallelization parameters"
  ## form footer.name = "Footer for docking protocol script"
  ## form footer.type = "textarea"
  ## form footer.cols = 80
  ## form footer.rows = 5

  #***

  *String annotation
  ## form annotation.type = None

  validate {
    gridnames = set([g.gridname for g in grids])
    for pnr, partner in enumerate(partners):
      if partner.gridname is not None:
        assert partner.gridname in gridnames, partner.gridname

    assert len(partners) > 0
  }

  error {
    'assert nr_iterations > 0 or search == "custom"'
    =>
    'Unless the docking search is "custom", you must set the number of docking iterations to at least 1, not {nr_iterations}'

    'assert len(iterations) > 0 or search == "custom"'
    =>
    'Unless the docking search is "custom", you must set the number of docking iterations to at least 1, not {nr_iterations}'

    'if dielec is not None: assert dielec in ("cdie", "rdie")'
    =>
    ''

    'assert rotations_file is None #1'
    =>
    'Your docking search is {search}, you can't upload a rotations file'

    'assert rotations_file is None #2'
    =>
    'You supplied a starting structures file, you can't upload a rotations file'

    'if forcefield is not None: assert forcefield in ("ATTRACT", "OPLSX")'
    =>
    ''

    'assert start_structures_file is None'
    =>
    'Your docking search is {search}, you can't upload a starting structures file'

    'assert nr_iterations >= len(iterations)'
    =>
    'You defined {len(iterations)} iterations, but you set the number of iterations to only {nr_iterations}'

    'assert partner.gridname in gridnames, partner.gridname'
    =>
    'You defined a non-existing grid name {partner.gridname} for partner {pnr+1}'

    'assert len(partners) == 2'
    =>
    'You must define two docking partners, not {len(partners)}'

    'if p.ensemblize == "custom": assert search == "custom"'
    =>
    'Custom ensemble selection can only be done with a custom docking search'

    'if search == "syst": assert len(partners) == 2'
    =>
    'For systematic search, the number of partners must be two, not {len(partners)}'

    'if search is not None: assert search in ("syst","random", "custom")'
    =>
    ''

    'assert rotations_file is not None or translations_file is not None'
    =>
    'You must define a starting structures file, a rotations file, or a translations file'

    'assert translations_file is None'
    =>
    'You can only specify a docking translations file with Custom search, and if you don't upload specific starting structures'

    'raise ValueError("The name of your run may contain only letters, digits, _ and -")'
    =>
    ''

    'assert len(partners) > 0'
    =>
    'Please define at least one docking partner'

    'if ghost: assert not ghost_ligands'
    =>
    'ghost mode and ghost-ligands mode are mutually exclusive'

    'for p in partners: assert p.haddock_restraints is None'
    =>
    'HADDOCK active/passive residues are not supported for multi-body docking'

    'if completion_tool is not None: assert completion_tool in ("whatif", "pdb2pqr_whatif", "amber", "cns")'
    =>
    ''

    'if has_haddock: assert has_active'
    =>
    'If you define HADDOCK AIR restraints, you must define active residues for at least one partner'

    'if has_haddock: assert nr_has_haddock > 1'
    =>
    'If you define HADDOCK AIR restraints, you must do so for both partners'

    'if len(partners) and calc_lrmsd: assert partners[0].rmsd_pdb_alt is None'
    =>
    'When there are multiple receptor reference structures, ligand RMSD cannot be computed with ATTRACT'

    'if calc_lrmsd and rmsd_atoms == "backbone": assert p.moleculetype == "Protein"'
    =>
    'If you use backbone atoms for ligand RMSD calculations, all your ligands must be proteins'

    'if rmsd_atoms is not None: assert rmsd_atoms in ("all","backbone","trace")'
    =>
    ''

    'if calc_lrmsd and rmsd_atoms == "trace" and partners[1].moleculetype in ("DNA", "RNA"): assert p.moleculetype in ("DNA", "RNA")'
    =>
    'If you want to use the P trace to calculate ligand RMSD, all ligands must be DNA/RNA, not just the first'

    'if calc_lrmsd and rmsd_atoms == "trace" and partners[1].moleculetype == "Protein": assert p.moleculetype == "Protein"'
    =>
    'If you want to use the CA trace to calculate ligand RMSD, all ligands must be protein, not just the first'

  }

}

Method generate(AttractModel) generate
