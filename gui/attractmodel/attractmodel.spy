Type Data_ATTRACT_Structures:Data{}
Type Data_ATTRACT_Rotations:Data{}
Type Data_ATTRACT_Translations:Data{}
Type Data_ATTRACT_Restraints:Data{}

Type AttractSymmetry {
  *Coordinate symmetry_axis
  *Coordinate symmetry_origin
  form {
    symmetry_axis.add_header("You can use generative symmetry or distance-restrained symmetry")
    symmetry_axis.add_header("If you want to use generative symmetry:")
    symmetry_axis.add_header(" - Provide an explicit symmetry axis and origin")    
    symmetry_axis.add_header(" - Provide an explicit symmetry fold")    
    symmetry_axis.add_header(" - Specify a single reference symmetry partner")
    symmetry_axis.add_header(" - In the Docking Partner section, only define the reference partner structure")    
    symmetry_axis.add_header("If you want to use distance-restrained symmetry:")
    symmetry_axis.add_header(" - Do not provide explicit symmetry axis and origin")    
    symmetry_axis.add_header(" - Specify all symmetry partners that are to be restrained")    
    symmetry_axis.add_header(" - In the Docking Partner section, specify all partner structures, which must be identical")
    symmetry_axis.name = "Generative symmetry axis"
    symmetry_origin.name = "Origin for generative symmetry axis"
  }
  *Integer symmetry_fold
  form {
    symmetry_fold.name = "Symmetry fold (2-fold, 3-fold, ...)"
  }
  validate {
    if symmetry_fold is not None: assert symmetry_fold > 1
  }
  Enum symmetry("Cx","Dx") = "Cx"
  validate {
    if symmetry_origin is not None: assert symmetry_axis is not None
    if symmetry_axis is not None: assert symmetry_origin is not None
  }
  IntegerArray partners = []
  form {
    partners.form = "soft"
  }  
  validate {
    if symmetry_axis is not None: 
      assert len(partners) == 1
      assert symmetry_fold is not None
      assert symmetry == "Cx"
    else:
      assert len(partners) > 1
      assert symmetry_fold is None or symmetry_fold == len(partners)
      if symmetry == "Dx": assert len(partners) == 4
  }
  error {
    'if symmetry is not None: assert symmetry in ("Cx","Dx")'
    =>
    ''

    'if symmetry_origin is not None: assert symmetry_axis is not None'
    =>
    'If you specify a symmetry origin, you must also supply a symmetry axis'

    'if symmetry_axis is not None: assert symmetry_origin is not None'
    =>
    'If you specify a symmetry axis, you must also supply a symmetry origin'
    
    'if symmetry == "Dx": assert len(partners) == 4'
    =>
    'With Dx-symmetry and no symmetry axis, the number of partners must be 4, not {len(partners)}'

    'if symmetry_axis is not None: assert len(partners) == 1'
    =>
    'If you define a symmetry axis, you must define exactly one symmetry partner, not {len(partners)}'

    'assert len(partners) > 1'
    =>
    'If you don't define a symmetry axis, you have define at least 2 symmetry partners, not {len(partners)}'
  }  
}

Type HaddockRestraintsInterface {
  """
  Definition of HADDOCK Ambiguous Interaction Restraints (AIRs)
  Lists of active and passive residues must be provided
  """  
  ## form activereslist.add_header("Please supply residues as comma-separated lists of residue numbers")
  ## form activereslist.name = "Active residues (directly involved in the interaction)"
  ## form passivereslist.name = "Passive residues (surrounding surface residues)"  
  ## form auto_passive.name = "Define passive residues automatically around the active residues"
  ## form activereslist.type = "text"
  ## form passivereslist.type = "text"
  HaddockResidueList activereslist = []
  HaddockResidueList passivereslist = []
  Bool auto_passive = False  
  validate {
    assert not (auto_passive and len(passivereslist))
  }
  error {
    'assert not (auto_passive and len(passivereslist))'
    =>
    'You manually defined passive residues, but also that they should be determined automatically'
  }
}

Type AttractPartnerInterface {
  ## form pdbfile.type = "file"
  ## form pdbfile.name = "Structure file"
  *ResourceData_PDB pdbfile
  
  *String gridname
  ## form gridname.name = "Name of the grid to use for this molecule"
  
  ## form chain.name = "Which chain of the structure must be used?"
  ## form chain.options = "All", "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"
  String chain = "All"
        
  *HaddockRestraintsInterface haddock_restraints
  ## form haddock_restraints.name = "Definition of residues for HADDOCK-type distance restraints (optional)"
  ## form haddock_restraints.auto_passive.type = None #TODO: disabled for now
      
  Enum moleculetype("Protein", "DNA", "RNA") = "Protein"
  ## form moleculetype.name = "What kind of molecule are you docking?"
  ## form moleculetype.optiontitles = "Protein/peptide", "DNA", "RNA"
    
  Bool generate_modes = False
  ## form generate_modes.name = "Generate harmonic modes"
  Bool aacontact_modes = False
  ## form aacontact_modes.name = "Use all-atom contact spring constants in mode generation"
  Integer nr_modes = 0
  form {
    nr_modes.name = "Number of harmonic modes to select"
    nr_modes.type = "option"
    nr_modes.options = list(range(0,10+1))
    nr_modes.optiontitles = ["No modes"] + [str(v) for v in nr_modes.options[1:]]
  }
  ## validate if nr_modes != 0: assert nr_modes >= 1 and nr_modes <= 10
  ## validate if generate_modes: assert nr_modes != 0
  ## validate if nr_modes != 0: assert generate_modes
    
  Bool ensemble = False
  ## form ensemble.name = "The PDB is a multi-model ensemble"
  Integer ensemble_size = 0
  ## form ensemble_size.name = "Number of conformers in the ensemble"
  ## validate if ensemble_size != 0: assert ensemble_size >= 1
  *Enum ensemblize("random","all","custom")
  ## form ensemblize.name = "Ensemble search"
  ## form ensemblize.optiontitles = "Random", "All", "Custom (none)"
  
  Bool has_hydrogens = False
  ## form has_hydrogens.name = "The PDB file contains all necessary atoms, including polar hydrogens"  
  Bool charged_termini = False 
  ## form charged_termini.name = "Add charged termini to each chain"  
    
  *ResourceData_PDB rmsd_pdb
  ## form rmsd_pdb.add_header("You can specify a PDB file to use as reference in RMSD calculations")
  ## form rmsd_pdb.add_header("Leave blank to use the docked PDB instead (bound conformation = unbound conformation)")
  ## form rmsd_pdb.name = "RMSD PDB file"
  ## form rmsd_pdb.type = "file"
  *ResourceData_PDB rmsd_pdb_alt
  ## form rmsd_pdb_alt.add_header("It is possible to specify alternative references ")
  ## form rmsd_pdb_alt.name = "Alternative RMSD PDB file"
  ## form rmsd_pdb_alt.type = "file"  
  *ResourceData_PDB rmsd_pdb_alt2
  ## form rmsd_pdb_alt2.name = "Alternative RMSD PDB file 2"
  ## form rmsd_pdb_alt2.type = "file"    
  validate {
    if rmsd_pdb_alt is not None: assert rmsd_pdb is not None
    if rmsd_pdb_alt2 is not None: assert rmsd_pdb_alt is not None
  }
  error {
    'if rmsd_pdb_alt is not None: assert rmsd_pdb is not None'
    =>
    'If you specify an alternative RMSD reference, also provide a main PDB reference'

    'if rmsd_pdb_alt2 is not None: assert rmsd_pdb_alt is not None'
    =>
    'You specified a second alternative RMSD reference, but not a first alternative'    
  }
  validate {
    if chain not in ("All", "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"):
       raise spyder.core.ValidationError("Please provide a chain")  
    if ensemble:
      assert ensemble_size > 1
      assert ensemblize is not None
    else:
      assert (ensemble_size in (0,1)) == (ensemblize is None)
  }
  error {
    'assert ensemblize is not None'
    =>
    'The ensemble search must be defined'

    'assert (ensemble_size in (0,1)) == (ensemblize is None)'
    =>
    'You must define the ensemble size and ensemble search, or none of the above'

    'if ensemblize is not None: assert ensemblize in ("random","all","custom")'
    =>
    ''

    'raise spyder.core.ValidationError("Please provide a chain")'
    =>
    ''

    'if nr_modes != 0: assert nr_modes >= 1 and nr_modes <= 10'
    =>
    'The number of modes must be between 1 and 10, not {nr_modes}'


    'if moleculetype is not None: assert moleculetype in ("Protein", "DNA", "RNA")'
    =>
    ''

    'assert ensemble_size > 1'
    =>
    'You must define an ensemble size larger than 1, not {ensemble_size}'

    'if ensemble_size != 0: assert ensemble_size >= 1'
    =>
    'If you define an ensemble size, it must at least 1, not {ensemble_size}'

    'if generate_modes: assert nr_modes != 0'
    =>
    'Please define the number of modes you want to generate'

    'if nr_modes != 0: assert generate_modes'
    =>
    'You defined a number of modes, but you did not turn on harmonic mode generation'
  }
}

Type AttractGrid:Degenerate {
  String gridname = ""
  ## form gridname.name = "Name of this grid"
  validate {
    gridname = gridname.strip()
    assert len(gridname) > 0
    self.gridname = gridname
    if not gridname.replace("_","").replace("-","").isalnum():
      raise ValueError("The name of the grid may contain only letters, digits, _ and -")  
  }

  ## form omp.add_header("Do you want to calculate the grid on multiple cores using OpenMP?")
  Bool omp = True
  ## form torque.add_header("Is the grid a torque grid?")
  Bool torque = False
  Float plateau_distance = 10.0
  ## form plateau_distance.name = "Plateau distance (A) for grid calculation"
  Float neighbour_distance = 12.0 
  ## form neighbour_distance.name = "Neighbor list cutoff (A) for grid calculation"
  Bool calc_potentials = True
  ## form calc_potentials.name = "Calculate long-range potentials on the grid"
  error {
    'raise ValueError("The name of the grid may contain only letters, digits, _ and -")'
    =>
    ''

    'assert len(gridname) > 0'
    =>
    'The grid name must be defined'
  }
}

Type AttractIteration {
  ## form rcut.add_header("The nonbonded pairlist distance cutoff (rcut) (in A**2) during this iteration")
  Float rcut = 1500
  ## form vmax.add_header("The maximum number of energy minimization or Monte Carlo steps (vmax)") 
  Integer vmax = 100
  ## form traj.add_header("Trajectory mode: only minimize the first structure, and output the structure after every minimization step")
  ## form traj.name = "Trajectory mode"
  Bool traj = False
  validate {
    assert rcut > 0
    assert vmax > 0
  }  
  Bool prep = False  
  ## form prep.add_header("Preparation mode: only minimizes the orientation of the molecules, without forcefield")
  ## form prep.name = "Preparation mode"
  Float restweight = 1
  ## form restweight.name = "Distance restraint weight"
  Bool mc = False
  Float mctemp = 3.5
  Float mcscalerot = 0.05
  Float mcscalecenter = 0.1
  Float mcscalemode = 0.1
  Float mcensprob = 0.1
  form {
    mc.group = "Monte Carlo"
    mc.name = "Enable Monte Carlo mode"
    mctemp.group = "Monte Carlo"
    mctemp.name = "Temperature (in kT)"
    mcscalerot.group = "Monte Carlo"
    mcscalerot.name = "Rotation step size (in radians)"
    mcscalecenter.group = "Monte Carlo"
    mcscalecenter.name = "Translation step size (in angstroms)"
    mcscalemode.group = "Monte Carlo"
    mcscalemode.name = "Mode deformation step size (in angstroms)"
    mcensprob.group = "Monte Carlo"
    mcensprob.name = "Probability to switch between ensemble conformers"
  }
  validate {
    assert mctemp > 0
    assert mcensprob >= 0 and mcensprob <= 1
  }
    error {
    'assert rcut > 0'
    =>
    'The distance cutoff must be larger than 0, not {rcut}'

    'assert vmax > 0'
    =>
    'The maximum number of energy minimizations must be larger than 0, not {vmax}'

    'assert mcensprob >= 0 and mcensprob <= 1'
    =>
    'The Monte Carlo ensemble replacement probability must be between 0 and 1, not {mcensprob}'

    'assert mctemp > 0'
    =>
    'The Monte Carlo temperature must be larger than 0, not {mctemp}'
  }
}

Type AttractAtomDensityGrid {
  Float voxelsize
  Integer dimension = 50
  Float forceconstant = 1000.0
  form {
    voxelsize.name = "Voxel size (A)"
    dimension.name = "Grid dimension (voxels)"
    forceconstant.name = "Force constant"
  }
  validate {
    assert voxelsize > 0
    assert dimension > 0
    assert forceconstant > 0
  }
}

Type IAttractParameters {
  Integer nstruc
  Float icut = 3.0  
  form {
    nstruc.name = "Number of structures to refine"
    icut.name = "Distance cutoff for flexible residues"
  }
  validate {
    assert nstruc > 0
    assert icut > 0
  }
  error {
    'assert icut > 0'
    =>
    'Number of structures to refine must be positive'

    'assert nstruc > 0'
    =>
    'Distance cutoff for flexible residues must be positive'
  }
}

Type AttractModel {
  String runname = "attract"
  form {
    runname.add_header("Please supply a name for your docking run (one word)")
    runname.name = "Name of the docking run"
  }  
  validate {
    if runname is not None:
      runname = runname.strip()
      self.runname = runname
      if not runname.replace("_","").replace("-","").isalnum():
        raise ValueError("The name of your run may contain only letters, digits, _ and -")  
  }
  
  AttractPartnerInterfaceArray partners
  form {
    partners.length = 10
    partners.name = "Docking partners"
    partners.form = "soft"
    for n in range(10):
      partners[n].name = "Docking partner %d" % (n+1)
      partners[n].group = "Docking partner %d" % (n+1)
  }
  validate {
    has_haddock = any([p.haddock_restraints for p in partners])
    nr_has_haddock = len([1 for p in partners if p.haddock_restraints])
    if has_haddock: assert nr_has_haddock > 1
    has_active = any([p.haddock_restraints.activereslist for p in partners if p.haddock_restraints])
    if has_haddock: assert has_active
  
    if len(partners) > 2:
      for p in partners: assert p.haddock_restraints is None
  }
  
  AttractGridArray grids = []
  form {
    grids.length = 10
    grids.group = "Grids"
    grids.name = "Grid"
    grids.form = "soft"
    grids.count_from_one = True
  }  
  
  #***Iteration parameters***  
  *Integer nr_iterations
  AttractIterationArray iterations = []
  form {      
    nr_iterations.default = 1
    nr_iterations.group = "Iteration parameters"
    nr_iterations.name = "Number of iterations"
    iterations.group = "Iteration parameters"
    iterations.length = 5
    iterations.form = "soft"
    iterations[0].name = "First iteration"
    iterations[1].name = "Second iteration"
    iterations[2].name = "Third iteration"
    iterations[3].name = "Fourth iteration"
    iterations[4].name = "Fifth iteration"
  }  
  validate {
    if nr_iterations is not None:
      assert nr_iterations > 0
      assert nr_iterations >= len(iterations)
  }
  #***Sampling parameters***
  Bool fix_receptor = False
  ## form fix_receptor.name = "Fix the receptor during docking"    
  Enum search("syst","random", "custom")
  ## form search.name = "Docking search"
  ## form search.optiontitles = "Systematic","Random", "Custom"
  validate {
    for p in partners:
      if p.ensemblize == "custom": assert search == "custom"
  }  
  Integer structures = 10000
  ## form structures.name = "Number of structures for random search"
  *ResourceData_ATTRACT_Structures start_structures_file
  ## form start_structures_file.type = "file"
  *ResourceData_ATTRACT_Rotations rotations_file
  ## form rotations_file.type = "file"
  *ResourceData_ATTRACT_Translations translations_file
  ## form translations_file.type = "file"
  *ResourceData_ATTRACT_Restraints restraints_file
  ## form restraints_file.type = "file"  
  Float restraints_score_weight = 0.01
  form {
    start_structures_file.add_header("Custom search files")
    start_structures_file.add_header("For a custom search, supply a starting structures file, OR: rotations and/or translations files")
    start_structures_file.name = "Starting structures file for custom search"
    rotations_file.name = "Rotations file for custom search"
    translations_file.name = "Translations file for custom search"
    restraints_file.name = "Distance restraints file (ATTRACT format)"
    restraints_score_weight.name = "weight of distance restraints during scoring"
  }
  validate {
    if search != "custom":
      assert rotations_file is None #1
      assert translations_file is None
      assert start_structures_file is None
      if search == "syst": assert len(partners) == 2
    elif start_structures_file is not None:
      assert rotations_file is None #2
      assert translations_file is None
    else:
      assert rotations_file is not None or translations_file is not None
      assert len(partners) == 2          
  }
  Bool demode = False
  ## form demode.add_header("If you used flexibility in the form of normal modes or iATTRACT, you may choose remove the deformations (de-mode) after the docking")
  ## form demode.name = "De-mode" 
  
  *IAttractParameters iattract
  form {
    iattract.nstruc.default = 50
  }
  form {
    fix_receptor.group = "Sampling parameters"
    search.group = "Sampling parameters"
    structures.group = "Sampling parameters"
    start_structures_file.group = "Sampling parameters"
    rotations_file.group = "Sampling parameters"
    translations_file.group = "Sampling parameters"
    restraints_file.group = "Sampling parameters"
    restraints_score_weight.group = "Sampling parameters"
    iattract.group = "Sampling parameters"
    demode.group = "Sampling parameters"
  }
  #*** 

  #***Energy and interaction parameters***
  Integer gravity
  form {
    gravity.name = "Gravity"
    gravity.type = "option"
    gravity.options = (0,1,2,3,4,5)
    gravity.optiontitles = ("No gravity", "To global origin", "To receptor", "Between all ligands", "Cryo-EM pre-assembly stage gravity", "Cryo-EM assembly stage gravity")
  }  
  
  Enum completion_tool("whatif", "pdb2pqr_whatif", "amber", "cns") = "pdb2pqr_whatif"
  form {
    completion_tool.add_header("External tool for PDB completion and hydrogens")
    completion_tool.add_header("NOTE: PDB2PQR, AMBER and CNS require a local installation")
    completion_tool.add_header("NOTE: PDB2PQR only completes proteins; WHATIF is used for nucleic acids")  
    completion_tool.name = "PDB completion method"
    completion_tool.optiontitles = (
      "WHATIF web server",
      "PDB2PQR",
      "AMBER",
      "CNS",
    )
  }
  
  Float rstk = 0.01
  form {
    rstk.name = "Restraining force constant"
    rstk.digits = 4
  }
  
  Enum forcefield("ATTRACT", "OPLSX") = "ATTRACT"
  ## form forcefield.add_header("Which forcefield is to be used?")
  ## form forcefield.name = "Forcefield"
  Bool ghost = False
  ## form ghost.add_header("In ghost mode, the forcefield is turned off")
  ## form ghost.name = "Enable ghost mode"
  Bool ghost_ligands = False
  ## form ghost_ligands.add_header("In ghost-ligands mode, the forcefield is turned off between ligands (all partners beyond the first)")
  ## form ghost_ligands.name = "Enable ghost-ligands mode"
  validate {
    if ghost: assert not ghost_ligands
  }
  
  AttractAtomDensityGridArray atomdensitygrids = []
  ## form atomdensitygrids.length = 3
  ## form atomdensitygrids.count_from_one = True
  ## form atomdensitygrids.form = "soft"
  ## form atomdensitygrids.add_header("Instead of a forcefield, you can define an atom density grid to prevent clashes")
  ## form atomdensitygrids.name = "Atom density grid"
  
  Float epsilon = 15
  ## form epsilon.add_header("Epsilon constant for the electrostatic energy term")
  ## form epsilon.name = "Epsilon"
  
  Enum dielec("cdie", "rdie") = "rdie"
  ## form dielec.name = "Use constant (cdie) or distance-dependent (rdie) dielectric"
  form {
    _g = "Energy and interaction parameters"
    gravity.group = _g
    completion_tool.group = _g
    rstk.group = _g
    forcefield.group = _g
    ghost.group = _g
    ghost_ligands.group = _g
    atomdensitygrids.group = _g
    epsilon.group = _g
    dielec.group = _g
  }
  #***
    
  AttractSymmetryArray symmetries = []
  form {
    symmetries.length = 5
    symmetries.name = "Symmetry"
    symmetries.count_from_one = True
    symmetries.form = "soft"
    symmetries[None].symmetry.name = "Symmetry type"
    symmetries[None].partners.name = "Symmetry partners"
    symmetries[None].partners.length = 12
    for n in range(12):
      symmetries[None].partners[n].name = n+1
  }  
  
  #**Analysis***  
  Bool rescoring = True  
  Float rcut_rescoring = 50.0    
  Bool sort = True
  Bool deredundant = True
  Bool deredundant_ignorens = True
  Bool deflex = False
  ## form deflex.add_header("If you perform RMSD analysis, you may remove all flexibility (ensemble and modes) beforehand")
  ## form deflex.name = "Remove flexibility"   
  Bool calc_lrmsd = False  
  Enum rmsd_atoms("all","backbone","trace") = "backbone"
  Bool calc_irmsd = False
  Bool calc_fnat = False
  Bool collect = True
  Integer nr_collect = 50
  form {
    rescoring.group = "Analysis"
    rcut_rescoring.group = "Analysis"
    sort.group = "Analysis"
    deredundant.group = "Analysis"
    deredundant_ignorens.group = "Analysis"
    deflex.group = "Analysis"
    calc_lrmsd.group = "Analysis"
    rmsd_atoms.group = "Analysis"
    calc_irmsd.group = "Analysis"
    calc_fnat.group = "Analysis"
    collect.group = "Analysis"
    nr_collect.group = "Analysis"
    
    rescoring.name = "Perform a rescoring step after docking"
    rcut_rescoring.add_header("The nonbonded pairlist distance cutoff (rcut) (in A**2) during rescoring")
    rcut_rescoring.name = "rcut (rescoring)"
    sort.name = "Sort the final structures according to forcefield energy"
    deredundant.name = "Remove redundant structures after docking"
    deredundant_ignorens.name = "Ignore ensemble conformers for redundancy"
    calc_lrmsd.name = "Calculate ligand RMSD after docking"
    rmsd_atoms.name = "Which atoms to use in RMSD calculation"
    rmsd_atoms.optiontitles = (
      "All heavy atoms",
      "Protein backbone",
      "Trace (CA or P; ligand RMSD only)"
    )
    calc_irmsd.name = "Calculate interface RMSD after docking"
    calc_fnat.name = "Calculate fraction of native contacts after docking"
    collect.name = "Collect the structures as PDBs after docking"
    nr_collect.name = "Number of structures to collect"
  }
  validate {
    for p in partners[1:]:
      if calc_lrmsd and rmsd_atoms == "backbone": assert p.moleculetype == "Protein"
    for p in partners[2:]:
      if calc_lrmsd and rmsd_atoms == "trace" and partners[1].moleculetype == "Protein": assert p.moleculetype == "Protein"
      if calc_lrmsd and rmsd_atoms == "trace" and partners[1].moleculetype in ("DNA", "RNA"): assert p.moleculetype in ("DNA", "RNA")
  }
  #***
    
  #***Computing and parallelization parameters***
  Integer np = 1
  ## form np.group = "Computing and parallelization parameters"
  ## form np.name = "Number of processor cores"
  Integer jobsize = 0
  ## form jobsize.group = "Computing and parallelization parameters"
  ## form jobsize.name = "Number of structures in a single job (leave blank to divide all structures equally over the cores)"
  
  *String header = ""
  ## form header.group = "Computing and parallelization parameters"
  ## form header.name = "Header for docking protocol script"
  ## form header.type = "textarea"
  ## form header.cols = 80
  ## form header.rows = 50

  *String footer = ""
  ## form footer.group = "Computing and parallelization parameters"
  ## form footer.name = "Footer for docking protocol script"
  ## form footer.type = "textarea"
  ## form footer.cols = 80
  ## form footer.rows = 5
  
  #***

  *String annotation
  ## form annotation.type = None
  
  validate {
    gridnames = set([g.gridname for g in grids])
    for pnr, partner in enumerate(partners):
      if partner.gridname is not None:
        assert partner.gridname in gridnames, partner.gridname     
    
    assert len(partners) > 0
  }
  
  error {
    'assert nr_iterations > 0'
    =>
    'You must set the number of docking iterations to at least 1, not {nr_iterations}'

    'if dielec is not None: assert dielec in ("cdie", "rdie")'
    =>
    ''

    'assert rotations_file is None #1'
    =>
    'Your docking search is {search}, you can't upload a rotations file'

    'assert rotations_file is None #2'
    =>
    'You supplied a starting structures file, you can't upload a rotations file'
    
    'if forcefield is not None: assert forcefield in ("ATTRACT", "OPLSX")'
    =>
    ''

    'assert start_structures_file is None'
    =>
    'Your docking search is {search}, you can't upload a starting structures file'

    'assert nr_iterations >= len(iterations)'
    =>
    'You defined {len(iterations)} iterations, but you set the number of iterations to only {nr_iterations}'

    'assert partner.gridname in gridnames, partner.gridname'
    =>
    'You defined a non-existing grid name {partner.gridname} for partner {pnr+1}'

    'assert len(partners) == 2'
    =>
    'You must define two docking partners, not {len(partners)}'

    'if p.ensemblize == "custom": assert search == "custom"'
    =>
    'Custom ensemble selection can only be done with a custom docking search'

    'if search == "syst": assert len(partners) == 2'
    =>
    'For systematic search, the number of partners must be two, not {len(partners)}'

    'if search is not None: assert search in ("syst","random", "custom")'
    =>
    ''

    'assert rotations_file is not None or translations_file is not None'
    =>
    'You must define a rotations or translations file'

    'assert translations_file is None'
    =>
    'You can only specify a docking translations file with Custom search, and if you don't upload specific starting structures'

    'raise ValueError("The name of your run may contain only letters, digits, _ and -")'
    =>
    ''
    
    'assert len(partners) > 0'
    =>
    'Please define at least one docking partner'
      
    'if ghost: assert not ghost_ligands'
    =>
    'ghost mode and ghost-ligands mode are mutually exclusive'
    
    'for p in partners: assert p.haddock_restraints is None'
    =>
    'HADDOCK active/passive residues are not yet supported for multi-body docking'
    
    'if completion_tool is not None: assert completion_tool in ("whatif", "pdb2pqr_whatif", "amber", "cns")'
    =>
    ''

    'if has_haddock: assert has_active'
    =>
    'If you define HADDOCK restraints, you must define active residues for at least one partner'

    'if has_haddock: assert nr_has_haddock > 1'
    =>
    'If you define HADDOCK restraints, you must do so for at least two partners'
    
    'if calc_lrmsd and rmsd_atoms == "backbone": assert p.moleculetype == "Protein"'
    =>
    'If you use backbone atoms for ligand RMSD calculations, all your ligands must be proteins'

    'if rmsd_atoms is not None: assert rmsd_atoms in ("all","backbone","trace")'
    =>
    ''
    
    'if calc_lrmsd and rmsd_atoms == "trace" and partners[1].moleculetype in ("DNA", "RNA"): assert p.moleculetype in ("DNA", "RNA")'
    =>
    'If you want to use the P trace to calculate ligand RMSD, all ligands must be DNA/RNA, not just the first'

    'if calc_lrmsd and rmsd_atoms == "trace" and partners[1].moleculetype == "Protein": assert p.moleculetype == "Protein"'
    =>
    'If you want to use the CA trace to calculate ligand RMSD, all ligands must be protein, not just the first'
  
  }
  
}

Method generate(AttractModel) generate
