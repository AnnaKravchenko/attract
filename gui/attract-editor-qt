#!/usr/bin/python

"""
Minimalistic ATTRACT interface file editor

To edit an existing ATTRACT interface file, supply it on the command line:
  attract-editor attract.web
To create a new one, don't supply a second argument:
  attract-editor

The "Save" button saves the edited file (to the same file, or to new.web
 if no file was supplied)

The "Generate shell script" button generates an executable protocol


Any exceptions will be printed on screen

"""

from __future__ import print_function

import sys, os

argv = [a for a in sys.argv if not a.startswith("--")]
if len(argv) == 1:
  inp = None
  outp = "new.web"
elif len(argv) == 2:
  inp = argv[1]
  d,f = os.path.split(inp)
  if len(d): os.chdir(d)
  inp = f  
  outp = inp
else: 
 raise Exception("Usage: attract-editor [file name]")

try:
  import spyder
  import spyder.qtform.anyQt
except ImportError:
  import traceback
  traceback.print_exc()
  if sys.platform == "win32":
    time.sleep(30) 
  sys.exit()    
from spyder.qtform.anyQt.QtCore import QBuffer, QObject
from spyder.qtform.anyQt.QtGui import QApplication
from spyder.qtform.anyQt.QtUiTools import QUiLoader

from spyder.qtform import qtview
import attractmodel
from Spyder import AttractModel

from spyder.formtools import model, controller

spydertype = AttractModel

form = spydertype._form()
form.add_button("Generate shell script", "after")
form.add_button("Save", "after")


#construct model, controller, comparator
m = model(spydertype._typetree())  #or: m = model(spydertype)
con = controller(form, m)

#optional: initialize model 
if inp is not None:
  params = AttractModel.fromfile(inp)
  m._set(params)
  
#build view
xml = spyder.qtform.xml(spydertype, form=form)
app = QApplication(argv)
loader = QUiLoader()
buf = QBuffer()
buf.open(QBuffer.ReadWrite)
buf.write(xml)
buf.close()
ui = loader.load(buf)
v = qtview.qtview(form)
v._wrap(ui)

#bind view to controller
con._bind_view(v)
#listen for model updates
con._listen()
#synchronize
con._sync_to_view()
con._sync_from_view() 

#register view listener 
# (note the order, after the mvc binding! The viewupdate will now be invoked last)

####################################################################

#exception printing (prints *all* exceptions, also the non-fatal ones)  
# TODO: make it nicer, visual (exceptiongui)

import traceback
def format_exc(exc,limit=None,pat=None):
  if isinstance(exc, model): 
    return format_exc(exc._exc(),limit,None)
  if exc is None: return []
  ret = []
  if isinstance(exc, list):
    for e in exc:
      ret += format_exc(e,limit,pat)
  elif isinstance(exc, dict):
    for k in sorted(exc.keys()):
      subpat = k
      if pat is not None: subpat = pat + "." + str(k)
      subret = format_exc(exc[k],limit,subpat)
      if len(subret):
        ret.append("Attribute %s:\n" % subpat)
        for l in subret: ret.append("  " + l)
  else:
    ret = traceback.format_exception(exc[0],exc[1],exc[2],limit)
  if pat is None: ret = "".join(ret)
  return ret


def dictcompare(d1, d2):
  #returns all elements of d2 that are not in d1
  if not isinstance(d1, dict): return d2
  ret = {}  
  for k in d2:
    v2 = d2[k]
    if k not in d1:
      ret[k] = v2
      continue
    else:
      v1 = d1[k]
      if isinstance(v1, dict) and isinstance(v2, dict):
        dv = dictcompare(v1, v2)
        if len(dv): 
          ret[k] = dv
      elif v1 != v2:
        ret[k] = v2
  return ret
   
old_exc = None
old_exc_str = ""
def viewupdate(*args):  
  global old_exc, old_exc_str
  print(con.partners[1]._dif())
  return ###  
  mexc = m._exc(full=True)  
  if mexc is None:
    old_exc = mexc
    if old_exc_str is not None: print("No exception")
    old_exc_str = None 
  else:     
    if old_exc is None: 
      dexc = mexc
    else:
      dexc = dictcompare(old_exc, mexc)
    if "_self" in dexc: dexc = {"_self": dexc["_self"]}
    if len(dexc):
      exc_str = format_exc(dexc,20)
      if exc_str != old_exc_str:
        print(exc_str)
      old_exc_str = exc_str  
      old_exc = mexc
  
####################################################################    

import attractsave
from functools import partial

v.buttons[0].listen(partial(attractsave.save, m, outp))
v.buttons[1].listen(partial(attractsave.generate, m, outp))
v.listen(viewupdate)

#fire up application
ui.show()
app.exec_()

